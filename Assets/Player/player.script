local debugger = require('debugger.debugger')
debugger.start()

require 'Assets.Modules.general'
local movement = require 'Assets.Player.walk'

local nutsprite = '#sprite'
local default_anim = idle_down

go.property('regular_speed', 50)
go.property('rolling_speed', 100)

go.property('regular_friction', 0.07)

function x_pos(x)
  if x then
    go.set_position(vmath.vector3(x, go.get_position().y, go.get_position().z))
  else
    return go.get_position().x
  end
end

function z_pos(z)
  if z then
    go.set_position(vmath.vector3(go.get_position().x, go.get_position().y, z))
  else
    return go.get_position().z
  end
end

function y_pos(y)
  if y then
    go.set_position(vmath.vector3(go.get_position().x, y, go.get_position().z))
  else
    return go.get_position().y
  end
end

function set_xz_pos(x, z)
  go.set_position(vmath.vector3(x, go.get_position().y, z))
end

function acquire_input()
  msg.post('.', hash('acquire_input_focus'))
end

function release_input()
  msg.post('.', hash('release_input_focus'))
end

function quick_animation(self, sprite, anim)
  if anim ~= self.current_anim then
    msg.post(sprite, "play_animation", { id = anim })
    self.current_anim = anim
  end
end

function init(self)
  self.correction = vmath.vector3()
  self.dir = vmath.vector3()
  self.last_dir_vector = vmath.vector3()
  self.last_dir = nil

  self.current_anim = nil

  self.can_move = true
  self.can_roll = true
  self.frozen = false

  self.dx = 0
  self.dz = 0

  self.on_action_area = false
  self.action_area_group = nil
  self.on_action_fun = function () end

  self.rolling = 'roll'
  self.walking = 'walk'
  self.stoped_rolling = 'sroll'
  self.state = self.walking

  self.speed = self.regular_speed
  self.friction = self.regular_friction
  
  acquire_input()
end

function on_message(self, message_id, message)
  print(message_id)
  local msg_fun_t = {
    [hash "contact_point_response"] = function ()
      local group = message.other_group
      if
        group == collisions.overworld
      then
        if message.distance > 0 then
          local proj = vmath.project(self.correction, message.normal * message.distance)
          if proj < 1 then
            local comp = (message.distance - message.distance * proj) * message.normal
            go.set_position(go.get_position() + comp)
            self.correction = self.correction + comp
          end
        end
      end
    end,
  
    [hash "animation_done"] = function ()    
      local jumpt = {
        
      } 
      
      if jumpt[message.id] then
        jumpt[message.id]()
      end
    end,

    [hash "trigger_response"] = function ()
      local function sign()
        self.frozen = true
        quick_animation(self, nutsprite, idle_up)

        if go.get(message.other_id, 'position') + vmath.vector3(0, 0, 10) ~= go.get_position() then
          go.animate('.', 'position', go.PLAYBACK_ONCE_FORWARD, go.get(message.other_id, 'position') + vmath.vector3(0, 0, 10), go.EASING_OUTCUBIC , 0.65, 0,
          function ()
            msg.post(message.other_id, msgs.read_sign)
          end)

        else
          msg.post(message.other_id, msgs.read_sign)

        end
      end

      local trigger_fun_t = {
        [trigger.sign] = sign
      }

      if message.enter then
        self.on_action_area = true
        self.action_area_group = message.other_group

        self.on_action_fun = trigger_fun_t[message.other_group]
      else
        self.on_action_area = false
        self.action_area_group = nil
        self.on_action_fun = nil
      end
    end,

    [hash "collision_response"] = function ()
    end,
  }

  if msg_fun_t[message_id] then
    msg_fun_t[message_id]()
  else
    print('no function for the MESSAGE: ', message_id)
  end
end

function update(self, dt)  
  local function reset_vars(self)
    self.dir = vmath.vector3()
    self.correction = vmath.vector3()
  end

  if not self.frozen then
    -- movement
    local newx, newz = movement.move(self, dt, x_pos(), z_pos())
    set_xz_pos(newx, newz)

    -- animation
    local anim = movement.animation(self) or default_anim
    quick_animation(self, nutsprite, anim)
    

    reset_vars(self)
  end
end

function on_input(self, action_id, action)
  local function input_move(self, action_id, action)
    if self.can_move then
      if action_id == key.down then
        self.state = self.walking

        if action.released then
          self.moving = false  
          self.last_dir_vector.z = 0
        else
          self.last_dir_vector.z = 1
          self.dir.z = 1
          self.last_dir = dir_down
          self.moving = true
        end

      elseif action_id == key.up then
        self.state = self.walking
        if action.released then
          self.moving = false
          self.last_dir_vector.z = 0
        else
          self.last_dir_vector.z = -1
          self.dir.z = -1
          self.last_dir = dir_up
          self.moving = true
        end

      elseif action_id == key.left then
        self.state = self.walking
        if action.released then
          self.moving = false 
          self.last_dir_vector.x = 0
        else
          self.dir.x = -1
          self.last_dir_vector.x = -1
          self.last_dir = dir_left
          self.moving = true
        end

      elseif action_id == key.right then
        self.state = self.walking
        if action.released then
          self.moving = false 
          self.last_dir_vector.x = 0
        else
          self.dir.x = 1
          self.last_dir_vector.x = 1
          self.last_dir = dir_right
          self.moving = true
        end
      end
    end
  end

  local function input_action(self, action_id, action)
    if self.on_action_area and action_id == key.action  then
      if action.pressed then
        self.on_action_fun()
      end
      
      return
    end
  end

  local function input_text_scroll(self, action_id, action)
    if self.on_action_area and action_id == key.action  then
      if action.pressed then
        self.frozen = false
      end
    end
  end

  if not self.frozen then
    input_move(self, action_id, action)
    input_action(self, action_id, action)
  else
    input_text_scroll(self, action_id, action)
  end

end